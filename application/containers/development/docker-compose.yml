version: '3.8'

x-common-variables: &common-variables
  PYTHONUNBUFFERED: 1
  PYTHONPATH: /srv/bot

x-common-slack-variables: &common-slack-variables
  SLACK_BOT_TOKEN: xoxb-
  SLACK_APP_TOKEN: xapp-
  PIZZA_CHANNEL_ID: C0

x-common-rabbitmq-variables: &common-rabbitmq-variables
  MQ_URL: amqp://guest:guest@rabbitmq:5672/%2F
  MQ_EXCHANGE: Pizza_Exchange
  MQ_EVENT_QUEUE: Pizza_Queue
  MQ_RPC_KEY: rpc
  MQ_EVENT_KEY: pizza

services:
  frontend:
    build:
      context: ../../
      dockerfile: containers/development/Dockerfile.frontend
    expose:
      - 3000
    volumes:
      - ../../frontend:/srv/frontend
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    networks:
      - proxy-network
  backend:
    build:
      context: ../../
      dockerfile: containers/development/Dockerfile.backend
    restart: always
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - 8080:8080
    volumes:
      - ../../backend:/srv/backend
    environment:
      DB_HOST: "database"
      DB_NAME: "pizza"
      DB_USER: "postgres"
      DB_PASSWD: "postgres"
      DB_PORT: "5432"
      PEOPLE_PER_EVENT: "5"
      DAYS_IN_ADVANCE_TO_INVITE: "10"
      <<: *common-variables
      <<: *common-rabbitmq-variables
      SECRET_KEY: "V3ryS3cr3tK3y"
      FLASK_ENV: "development"
      FLASK_APP: "main.py"
      FLASK_RUN_HOST: "0.0.0.0"
      FLASK_RUN_PORT: "3000"
      FRONTEND_URI: "https://localhost"
      GOOGLE_CLIENT_ID: ""
      GOOGLE_CLIENT_SECRET: ""
    networks:
      - database-network
      - proxy-network
      - rabbitmq_network
  bot-worker:
    build:
      context: ../../
      dockerfile: containers/development/Dockerfile.bot.worker
    volumes:
      - ../../bot:/srv/bot
    environment:
      <<: *common-slack-variables
      <<: *common-variables
      <<: *common-rabbitmq-variables
      REPLY_DEADLINE_IN_HOURS: "24"
      HOURS_BETWEEN_REMINDERS: "4"
    restart: always
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - database-network
      - rabbitmq_network
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - rabbitmq_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5
  database:
    image: postgres
    restart: always
    volumes:
      - database_data:/var/lib/postgressql/data
    environment:
      POSTGRES_DB: pizza
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgressql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    networks:
      - database-network
  nginx:
    image: nginx:latest
    build:
      context: ./
      dockerfile: Dockerfile.nginx
    depends_on: 
      - frontend
      - backend
    networks:
      - proxy-network
    ports:
      - 80:80
      - 443:443

networks:
  database-network:
    driver: bridge
  proxy-network:
    driver: bridge
  rabbitmq_network:
    driver: bridge

volumes:
  database_data:
